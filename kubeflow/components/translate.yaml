name: Translate
description: |
  Translate dataset using NMT
inputs:
  - {name: image, description: ''}
  - {name: project, description: ''}
  - {name: owner, description: ''}
  - {name: experiment, description: ''}
  - {name: s3_bucket, description: ''}
  - {name: model_name_or_path, description: ''}
  - {name: input_splits, description: ''}
  - {name: train_output_per_example, description: ''}
  - {name: nmt, description: ''}
  - {name: do_alignment, description: ''}
  - {name: src_lang, description: ''}
  - {name: tgt_lang, description: ''}
  - {name: dlg_side, description: ''}
  - {name: prepare_for_translation, description: ''}
  - {name: do_translation, description: ''}
  - {name: post_process_translation, description: ''}
  - {name: task_name, description: ''}
  - {name: s3_datadir, description: ''}
  - {name: additional_args, description: ''}
outputs:

implementation:
  container:
    image: '{{inputs.parameters.image}}'
    command:
    - /bin/bash
    - -ex
    - -c 
    - |
      . /opt/genie-toolkit/lib.sh
      parse_args "$0" "image owner project experiment s3_bucket model_name_or_path input_splits train_output_per_example nmt do_alignment src_lang tgt_lang dlg_side prepare_for_translation do_translation post_process_translation task_name s3_datadir" "$@"
      shift $n
      cd $HOME

      /opt/genie-toolkit/sync-repos.sh

      if [ -f workdir/Makefile ] ; then
        MAKEDIR='.'
      else
        MAKEDIR=${project}
      fi

      cat >> workdir/config.mk <<EOF
      developer_key = ${THINGPEDIA_DEVELOPER_KEY}
      EOF

      cd workdir/${MAKEDIR}

      export translation_arguments="$@"

      translate_direct() {
        for f in "${input_splits_array[@]}" ; do
          genienlp run-paraphrase \
            --id_column 0 --input_column 1 --gold_column 1 \
            --input_file ${experiment}/en/aug-en/unquoted-qpis-marian/$f.tsv \
            --output_file ${experiment}/marian/${tgt_lang}/unquoted-qpis-direct-translated/$f.tsv \
            --model_name_or_path ${model_name_or_path} \
            --tgt_lang ${tgt_lang} \
            --output_example_ids_too \
            --task translate \
            ${translation_arguments}
        done
      }


      translate() {
        for f in "${input_splits_array[@]}" ; do
          genienlp run-paraphrase \
            --id_column 0 --input_column 1 --gold_column 1 \
            --input_file ${experiment}/en/aug-en/unquoted-qpis-marian/$f.tsv \
            --output_file ${experiment}/marian/${tgt_lang}/unquoted-qpis-translated/$f.tsv \
            --model_name_or_path ${model_name_or_path} \
            --tgt_lang ${tgt_lang} \
            --output_example_ids_too \
            --task translate \
            --replace_qp \
            --force_replace_qp \
            --output_attentions \
            ${translation_arguments}
        done
      }

      aws s3 cp s3://${s3_bucket}/mehrad/extras/gt-json/multilanguage-a40fe9320f88.json ./gt-json/multilanguage-a40fe9320f88.json

      IFS='+'; read -ra input_splits_array <<<"$input_splits"; IFS=' '
      if ${prepare_for_translation}; then
        # copy workdir makefiles over
        aws s3 sync s3://${s3_bucket}/${owner}/workdir/${project} ./ --exclude "*" \
          --include '*.mk' --include '*.config' --include '*/schema.tt' --include 'Makefile' --include '*.py' \
          --include "*${experiment}/en/*" --include "*${experiment}/marian/${tgt_lang}/*" --include '*dlg-shared-parameter-datasets*' --include "*dataset-dialogs/${experiment}/${dataset}/*"

        make -B -j6 geniedir=/opt/genie-toolkit all_names="${input_splits_array[*]}" experiment_dialog=${experiment} process_data
        aws s3 sync ./ s3://geniehai/${owner}/workdir/${project}/ --exclude '*' --include "*${experiment}*"
      fi

      # translate
      if ${do_translation}; then
        # copy workdir makefiles over
        aws s3 cp --recursive s3://${s3_bucket}/${owner}/workdir/${project} ./ --exclude "*" \
          --include '*.mk' --include '*.config' --include '*/schema.tt' --include 'Makefile' --include '*.py' \
          --include "*${experiment}/en/*"

        if ${direct} ; then
          translate_direct
        else
          translate
        fi
        aws s3 sync ./ s3://geniehai/${owner}/workdir/${project}/ --exclude '*' --include '*unquoted-qpis-translated*' --include '*unquoted-qpis-direct-translated*'
      fi

      # further process the translated files
      if ${post_process_translation}; then
        # copy workdir makefiles over
        aws s3 cp --recursive s3://${s3_bucket}/${owner}/workdir/${project} ./ --exclude "*" \
          --include '*.mk' --include '*.config' --include '*/schema.tt' --include 'Makefile' --include '*.py' \
          --include "*${experiment}/en/*"  --include "*${experiment}/marian/${tgt_lang}/*" --include "*${experiment}/gt/${tgt_lang}/*" --include '*dlg-shared-parameter-datasets*' --include '*parameter-datasets*' --include '*shared-parameter-datasets*'

        if [ ${nmt} == "marian" ] ; then
          make -B -j6 geniedir=/opt/genie-toolkit all_names="${input_splits_array[*]}" experiment=${experiment} train_output_per_example=${train_output_per_example} skip_translation=true translate_marian_unquoted_${tgt_lang}
        elif [ ${nmt} == "gt" ] ; then
          make -B -j6 geniedir=/opt/genie-toolkit all_names="${input_splits_array[*]}" gt_credential_file="gt-json/multilanguage-a40fe9320f88.json" experiment=${experiment} train_output_per_example=${train_output_per_example} skip_translation=true translate_gt_quoted_${tgt_lang}
        fi
        aws s3 sync ./ s3://geniehai/${owner}/workdir/${project}/ --exclude '*' --include "*${experiment}*"
      fi

    args: [
      'cmd',
      --image, {inputValue: image},
      --owner, {inputValue: owner},
      --project, {inputValue: project},
      --experiment, {inputValue: experiment},
      --s3_bucket, {inputValue: s3_bucket},
      --model_name_or_path, {inputValue: model_name_or_path},
      --input_splits, {inputValue: input_splits},
      --train_output_per_example, {inputValue: train_output_per_example},
      --nmt, {inputValue: nmt},
      --do_alignment, {inputValue: do_alignment},
      --src_lang, {inputValue: src_lang},
      --tgt_lang, {inputValue: tgt_lang},
      --dlg_side, {inputValue: dlg_side},
      --prepare_for_translation, {inputValue: prepare_for_translation},
      --do_translation, {inputValue: do_translation},
      --post_process_translation, {inputValue: post_process_translation},
      --task_name, {inputValue: task_name},
      --s3_datadir, {inputValue: s3_datadir},
      --, {inputValue: additional_args}
    ]
