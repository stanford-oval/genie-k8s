name: Filter Paraphrases
description: |
  Filter paraphrases using a parser
inputs:
  - {name: image, description: '', default: ''}
  - {name: s3_bucket, description: '', default: ''}
  - {name: owner, description: '', default: ''}
  - {name: task_name, description: '', default: '' }
  - {name: project, description: '', default: ''}
  - {name: experiment, description: '', default: ''}
  - {name: dataset, description: '', default: ''}
  - {name: s3_database_dir, description: '', default: '' }
  - {name: s3_bootleg_prepped_data, description: '', default: ''}
  - {name: s3_original_bootleg_prepped_data, description: '', default: ''}
  - {name: s3_input_datadir, description: '', default: ''}
  - {name: filtering_model, description: '', default: ''}
  - {name: filtering_batch_size, description: '', default: ''}
  - {name: paraphrase_subfolder, description: '', default: ''}
  - {name: additional_args, description: '', default: ''}
outputs:
  - {name: s3_output_datadir}
implementation:
  container:
    image: '{{inputs.parameters.image}}'
    command:
    - /bin/bash
    - -c
    - |
      . /opt/genie-toolkit/lib.sh

      parse_args "$0" "image s3_bucket owner task_name project experiment dataset s3_database_dir s3_bootleg_prepped_data s3_original_bootleg_prepped_data s3_input_datadir s3_output_datadir filtering_model filtering_batch_size task_name paraphrase_subfolder" "$@"
      shift $n

      set -e
      set -x

      /opt/genie-toolkit/sync-repos.sh

      # get parapharsing scripts from genie-workdirs
      git clone git@github.com:stanford-oval/genie-workdirs.git workdir
      cd workdir/autoparaphrase/
      git checkout master

      if test "${s3_database_dir}" != None ; then
        rsync -rv ${s3_database_dir}/train/ ./database/
      fi

      if test "${s3_bootleg_prepped_data}" != None ; then
        rsync -rv ${s3_bootleg_prepped_data} results_temp --exclude '*' --include '*bootleg_labels.jsonl'
      fi

      if test "${s3_original_bootleg_prepped_data}" != None ; then
        rsync -rv ${s3_original_bootleg_prepped_data} results_temp --exclude '*' --include '*bootleg_labels.jsonl'
      fi

      rsync -rv --exclude "synthetic*.txt" --exclude "*bootleg*" --exclude "*chunked*" "${s3_input_datadir}" input_dataset/
      rsync -rv --exclude '*/dataset/*' --exclude '*/cache/*' --exclude 'iteration_*.pth' --exclude '*_optim.pth' "${filtering_model}" filtering_model/

      mkdir -p output_dataset
      cp -r input_dataset/* output_dataset

      s3_output_dir="s3://${s3_bucket}/${owner}/dataset/${project}/${experiment}/${dataset}-gen-filt/`date +%s`/"

      mkdir -p `dirname $s3_output_datadir`
      echo ${s3_output_dir} > $s3_output_datadir

      filtering_arguments="$@"

      case "$task_name" in
        "almond_dialogue_nlu" | "almond_dialogue_nlu_agent")
          is_dialogue=true
          input_dir="input_dataset/$paraphrase_subfolder"
          output_dir="output_dataset/$paraphrase_subfolder"
          filtering_dir="almond/$paraphrase_subfolder"
          ;;

        "almond")
          input_dir="input_dataset"
          output_dir="output_dataset"
          filtering_dir="almond"
          ;;

        *)
          echo "Error: invalid task name."
          exit 1
          ;;
      esac

      if ! test -f ${input_dir}/unfiltered.tsv ; then
        echo "Error: unfiltered.tsv does not exist."
        exit 1
      fi

      make append-to-original \
        task_name=${task_name} \
        filtering_dir=${filtering_dir} \
        filtering_batch_size=${filtering_batch_size} \
        filtering_output_dir=${output_dir} \
        filtering_model=filtering_model \
        filtering_arguments="${filtering_arguments}"


      # upload the new dataset to storage
      rsync -rv output_dataset/ "${s3_output_dir}"
      rsync -rv results_temp/ ${s3_original_bootleg_prepped_data} --exclude '*' --include '*bootleg_labels.jsonl'


    args: [
      'cmd',
      --image, {inputValue: image},
      --s3_bucket, {inputValue: s3_bucket},
      --owner, {inputValue: owner},
      --task_name, {inputValue: task_name},
      --project, {inputValue: project},
      --experiment, {inputValue: experiment},
      --dataset, {inputValue: dataset},
      --s3_database_dir, { inputValue: s3_database_dir },
      --s3_bootleg_prepped_data, {inputValue: s3_bootleg_prepped_data},
      --s3_original_bootleg_prepped_data, {inputValue: s3_original_bootleg_prepped_data},
      --s3_input_datadir, {inputValue: s3_input_datadir},
      --s3_output_datadir, {outputPath: s3_output_datadir},
      --filtering_model, {inputValue: filtering_model},
      --filtering_batch_size, {inputValue: filtering_batch_size},
      --paraphrase_subfolder, {inputValue: paraphrase_subfolder},
      --, {inputValue: additional_args},
    ]
