name: Predict
description: |
  Predict
inputs:
  - {name: image, description: '', default: ''}
  - {name: owner, description: '', default: ''}
  - {name: eval_sets, description: '', default: ''}
  - {name: task_name, description: '', default: ''}
  - {name: model_name_or_path, description: '', default: ''}
  - {name: s3_input_datadir, description: '', default: ''}
  - {name: s3_database_dir, description: '', default: ''}
  - {name: s3_bootleg_prepped_data, description: '', default: ''}
  - {name: model_type, description: '', default: ''}
  - {name: dataset_subfolder, description: '', default: ''}
  - {name: val_batch_size, description: '', default: ''}
  - {name: additional_args, description: '', default: ''}
outputs:
  - {name: metrics_output}
  - {name: s3_metrics_output}
  - {name: MLPipeline UI metadata, type: UI metadata}
  - {name: MLPipeline Metrics, type: Metrics}
implementation:
  container:
    image: '{{inputs.parameters.image}}'
    command:
    - /bin/bash
    - -ex
    - -c 
    - |
      . /opt/genie-toolkit/lib.sh
      parse_args "$0" "image owner eval_sets task_name model_name_or_path s3_input_datadir s3_database_dir s3_bootleg_prepped_data model_type dataset_subfolder metrics_output s3_metrics_output val_batch_size" "$@"
      shift $n
      cd $HOME

      /opt/genie-toolkit/sync-repos.sh
      
      modeldir="$HOME/model/"
      mkdir -p "$modeldir"

      if test "${dataset_subfolder}" = "None" ; then
        dataset_subfolder=
      fi

      case $task_name in
        "almond"*)
          dataset_dir=dataset/almond
        ;;

        *)
           dataset_dir=dataset
        ;;
      esac

      aws s3 sync --no-progress ${s3_input_datadir}${dataset_subfolder} $dataset_dir --exclude "synthetic*.txt" --exclude "*bootleg*" --exclude "*chunked*"

      if test "${s3_database_dir}" != None ; then
        aws s3 sync --no-progress ${s3_database_dir}/eval/ ./database/
      fi

      if test "${s3_bootleg_prepped_data}" != None ; then
        aws s3 sync --no-progress ${s3_bootleg_prepped_data} results_temp --exclude '*' --include '*bootleg_labels.jsonl'
      fi

      # if not an s3 path assume pretrained model name and save it in genienlp format
      if [[ "${model_name_or_path}" != "s3://"* ]] ; then
        genienlp train --train_tasks ${task_name} --train_iterations 0 --save "$modeldir" --model ${model_type} --pretrained_model ${model_name_or_path} --exist_ok
        s3_output=s3://geniehai/${owner}/workdir/prediction/${task_name}/${model_type}/${model_name_or_path}
      else
        aws s3 sync --no-progress "${model_name_or_path}" "$modeldir"/ --exclude "iteration_*.pth" --exclude "*_optim.pth" --exclude "*eval/*"  --exclude "*.log"
        s3_output=${model_name_or_path%/}
      fi

      S3_METRIC_OUTPUT="$s3_output"/pred/

      for e_set in ${eval_sets} ; do
        genienlp predict \
            --data "dataset" \
            --path "$modeldir" \
            --eval_dir "./eval" \
            --evaluate valid \
            --pred_set_name ${e_set} \
            --task ${task_name} \
            --overwrite \
            --silent \
            --skip_cache \
            --val_batch_size ${val_batch_size} \
            $@

        # rename val subfolder
        mv ./eval/valid/ ./eval/$e_set/

        mkdir -p `dirname $s3_metrics_output`
        mkdir -p $metrics_output

        echo $S3_METRIC_OUTPUT >> $s3_metrics_output
        cp -r ./eval/ $metrics_output/

        genienlp write-kf-metrics --eval_file ./eval/${e_set}/${task_name}.results.json

        aws s3 sync --no-progress "./eval" $S3_METRIC_OUTPUT
      done


    args: [
      'cmd',
      --image, {inputValue: image},
      --owner, {inputValue: owner},
      --eval_sets, {inputValue: eval_sets},
      --task_name, {inputValue: task_name},
      --model_name_or_path, {inputValue: model_name_or_path},
      --s3_input_datadir, {inputValue: s3_input_datadir},
      --s3_database_dir, {inputValue: s3_input_datadir},
      --s3_bootleg_prepped_data, {inputValue: s3_input_datadir},
      --model_type, {inputValue: model_type},
      --dataset_subfolder, {inputValue: dataset_subfolder},
      --s3_metrics_output, {outputPath: s3_metrics_output},
      --metrics_output, { outputPath: metrics_output },
      --val_batch_size, {inputValue: val_batch_size},
      --, {inputValue: additional_args}
    ]

    fileOutputs:
      MLPipeline UI metadata: /tmp/mlpipeline-ui-metadata.json
      MLPipeline Metrics: /tmp/mlpipeline-metrics.json
