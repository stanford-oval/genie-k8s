name: Eval SPL
description: |
  Evaluate models trained for SPL experiments
inputs:
  - {name: image, description: '', default: ''}
  - {name: project, description: '', default: ''}
  - {name: owner, description: '', default: ''}
  - {name: experiment, description: '', default: ''}
  - {name: model, description: '', default: ''}
  - {name: eval_set, description: '', default: ''}
  - {name: annotated_set_name, description: '', default: ''}
  - {name: is_oracle, description: '', default: ''}
  - {name: pred_languages, description: '', default: ''}
  - {name: task_name, description: '', default: ''}
  - {name: s3_model_dir, description: '', default: ''}
  - {name: s3_datadir, description: ''}
  - {name: s3_database_dir, description: ''}
  - {name: additional_args, description: '', default: ''}
outputs:
  - {name: metrics_output}
  - {name: s3_metrics_output}
  - {name: MLPipeline UI metadata, type: UI metadata}
  - {name: MLPipeline Metrics, type: Metrics}
implementation:
  container:
    image: '{{inputs.parameters.image}}'
    command:
    - /bin/bash
    - -ex
    - -c 
    - |
      . /opt/genie-toolkit/lib.sh
      parse_args "$0" "image project owner experiment model eval_set task_name s3_model_dir s3_datadir pred_languages s3_metrics_output metrics_output annotated_set_name is_oracle s3_database_dir" "$@"
      shift $n
      cd $HOME

      /opt/genie-toolkit/sync-repos.sh

      if [ -f workdir/Makefile ] ; then
        MAKEDIR='.'
      else
        MAKEDIR=spl
      fi

      cat >> workdir/config.mk <<EOF
      developer_key = ${THINGPEDIA_DEVELOPER_KEY}
      EOF

      cd workdir/${MAKEDIR}

      if test "${s3_database_dir}" != None ; then
        aws s3 sync --no-progress ${s3_database_dir}/bootleg/ ./database/
      fi

      IFS='+'; read -ra PLS <<<"$pred_languages"; IFS=' '
      IFS='+'; read -ra ES <<<"$eval_set"; IFS=' '

      echo "${PLS[@]}"

      export TZ=America/Los_Angeles
      export GENIENLP_DATABASE_DIR=./database/

      for lang in "${PLS[@]}"; do
        for e_set in "${ES[@]}" ; do
          mkdir -p $experiment/${e_set}/${pred_lang}
          if [[ ! "$task_name" == *"multilingual"* ]] ; then pred_lang='' ; else pred_lang="$lang/" ; fi

          if [[ "$task_name" == *"contextual"* || "$task_name" == *"dialog"* ]] ; then
              is_dlg=true
              has_annotated=false
              aws s3 sync ${s3_datadir} ./dataset/ --exclude "*" --include "*eval*.tsv"  --include "*test*.tsv"

              if [[ "$task_name" == *"agent"* ]] ; then dlg_side='agent' ; else dlg_side='user' ; fi


              ########
              make -j2 -B geniedir=/opt/genie-toolkit GENIENLP_DATABASE_DIR=./database/ s3_model_dir=${s3_model_dir} project=$project experiment=$experiment eval_set=${e_set} `if ${is_oracle} ; then echo "evalflags=--oracle" ; fi` input_eval_server="./dataset/${pred_lang}${dlg_side}/${e_set}.tsv" ${experiment}/${e_set}/${model}.nlu.results
              ########

              for f in $experiment/${e_set}/${model}.nlu.{results,debug} ; do
                aws s3 cp $f s3://geniehai/${owner}/workdir/${project}/${experiment}/${e_set}/${pred_lang} || true
              done
              cat $experiment/${e_set}/${model}.nlu.results

              if [[ "${annotated_set_name}" != 'None' && -f ./dataset/${pred_lang}annotated/${annotated_set_name}.txt ]] ; then
                has_annotated=true

                ########
                make -j2 -B geniedir=/opt/genie-toolkit GENIENLP_DATABASE_DIR=./database/ s3_model_dir=${s3_model_dir} project=$project experiment=$experiment eval_set=${e_set} `if ${is_oracle} ; then echo "evalflags=--oracle" ; fi` input_eval_server="./dataset/${pred_lang}annotated/${annotated_set_name}.txt" ${experiment}/${e_set}/${model}.dialog.results
                make -j2 -B geniedir=/opt/genie-toolkit GENIENLP_DATABASE_DIR=./database/ s3_model_dir=${s3_model_dir} project=$project experiment=$experiment eval_set=${e_set} `if ${is_oracle} ; then echo "evalflags=--oracle" ; fi` input_eval_server="./dataset/${pred_lang}annotated/${annotated_set_name}.txt" ${experiment}/${e_set}/${model}.predictions.json
                ########

                for f in $experiment/${e_set}/${model}.dialog.{results,debug} ; do
                  aws s3 cp $f s3://geniehai/${owner}/workdir/${project}/${experiment}/${e_set}/${pred_lang} || true
                done
                aws s3 cp $experiment/${e_set}/${model}.predictions.json s3://geniehai/${owner}/workdir/${project}/${experiment}/${e_set}/${pred_lang} || true
              fi

          else
            is_dlg=false
            has_annotated=false
            aws s3 sync ${s3_datadir} ./dataset/ --exclude "*" --include "*eval*.tsv"  --include "*test*.tsv"

            ########
            make -j2 -B geniedir=/opt/genie-toolkit GENIENLP_DATABASE_DIR=./database/ s3_model_dir=${s3_model_dir} project=$project experiment=$experiment eval_set=${e_set} `if ${is_oracle} ; then echo "evalflags=--oracle" ; fi` input_eval_server="./dataset/${pred_lang}${e_set}.tsv" ${experiment}/${e_set}/${model}.results_single
            ########

            for f in $experiment/${e_set}/${model}.{results,debug} ; do
              aws s3 cp $f s3://geniehai/${owner}/workdir/${project}/${experiment}/${e_set}/${pred_lang}
            done
            cp $experiment/${e_set}/${model}.results $experiment/${e_set}/${model}.nlu.results
            if [[ -s $experiment/${e_set}/${model}.errors ]] ; then
              aws s3 cp $experiment/${e_set}/${model}.errors s3://geniehai/${owner}/workdir/${project}/${experiment}/${e_set}/${pred_lang}
            fi
            cat $experiment/${e_set}/${model}.results
          fi

        done

      ########
      make -B s3_metrics_output=${s3_metrics_output} metrics_output=${metrics_output} is_dlg=${is_dlg} has_annotated=${has_annotated} artifact_lang=${pred_lang} project=$project experiment=$experiment eval_set=$eval_set evaluate-output-artifacts-${model}
      ########

      done


    args: [
      'cmd',
      --image, {inputValue: image},
      --owner, {inputValue: owner},
      --project, {inputValue: project},
      --experiment, {inputValue: experiment},
      --model, {inputValue: model},
      --eval_set, {inputValue: eval_set},
      --s3_model_dir, {inputValue: s3_model_dir},
      --s3_datadir, {inputValue: s3_datadir},
      --s3_database_dir, {inputValue: s3_database_dir},
      --annotated_set_name, {inputValue: annotated_set_name},
      --is_oracle, {inputValue: is_oracle},
      --pred_languages, {inputValue: pred_languages},
      --task_name, {inputValue: task_name},
      --s3_metrics_output, {outputPath: s3_metrics_output},
      --metrics_output, {outputPath: metrics_output},
      --, {inputValue: additional_args}
    ]

    fileOutputs:
      MLPipeline UI metadata: /tmp/mlpipeline-ui-metadata.json
      MLPipeline Metrics: /tmp/mlpipeline-metrics.json
